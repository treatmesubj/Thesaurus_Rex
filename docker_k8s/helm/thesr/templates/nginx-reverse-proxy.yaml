apiVersion: v1
kind: Service
metadata:
  labels:
    service: nginx-reverse-proxy
  name: nginx-reverse-proxy
spec:
  # type: LoadBalancer
  type: NodePort
  ports:
    - name: "443"
      port: 443
      targetPort: 443
      nodePort: 30111
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    service: nginx-reverse-proxy
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: nginx-reverse-proxy
  name: nginx-reverse-proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      service: nginx-reverse-proxy
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        network/go-live-default: "true"
        service: nginx-reverse-proxy
    spec:
      containers:
        - image: nginx-reverse-proxy
          name: nginx-reverse-proxy
          imagePullPolicy: Never
          ports:
            - containerPort: 443
            - containerPort: 80
          resources: {}
          volumeMounts:
            - mountPath: {{ .Values.mounts.letsencrypt.container.root }}
              name: nginx-reverse-proxy-hostpathroot
            - mountPath: {{ .Values.mounts.letsencrypt.container.certs }}
              name: nginx-reverse-proxy-hostpathcerts
      hostname: nginx-reverse-proxy
      restartPolicy: Always
      volumes:
        - hostPath:
            path: {{ .Values.mounts.letsencrypt.host.root }}
            type: Directory
          name: nginx-reverse-proxy-hostpathroot
        - hostPath:
            path: {{ .Values.mounts.letsencrypt.host.certs }}
            type: Directory
          name: nginx-reverse-proxy-hostpathcerts
status: {}
